[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "main-module/week-01.html",
    "href": "main-module/week-01.html",
    "title": "sains-data-2023",
    "section": "",
    "text": "Pada module ini kita akan coba mememahami package pandas, yang merupakan package inti dalam sains-data. kita akan coba melakukan beberapa transformasi data menggunakan pandas.\nsebelum itu, python module di bawah ini yang akan digunakan selama praktikum.\n\nimport numpy as np\nimport pandas as pd\n\n\n\n\npandas.Series sangat mirip dengan array NumPy (bahkan dibangun di atas objek array NumPy). Yang membedakan array NumPy dari sebuah Series adalah bahwa sebuah Series dapat memiliki label index, yang berarti dapat diindeks dengan label, bukan hanya lokasi nomor saja. Selain itu, sebuah Series tidak perlu menyimpan data numerik, ia dapat menyimpan objek Python sembarang.\n\n\nPaling mudah, ktia dapat membuat pd.Series dengan python list\n\nmy_index= ['a','b','c','d','e']\nmy_data= [1,2,3,4,5]\nmy_series= pd.Series(data=my_data, index=my_index)\n\n\nprint(my_series)\nprint(my_series.__class__)\n\na    1\nb    2\nc    3\nd    4\ne    5\ndtype: int64\n<class 'pandas.core.series.Series'>\n\n\n\n\n\nKita juga dapat membuat pd.Series dengan dictionary\n\n# creating a series from a dictionary\nmy_dict= {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\nmy_series_dict= pd.Series(my_dict)\n\n\nprint(my_series_dict)\nprint(my_series_dict.__class__)\n\na    1\nb    2\nc    3\nd    4\ne    5\ndtype: int64\n<class 'pandas.core.series.Series'>\n\n\n\n\n\n\n# Imaginary Sales Data for 1st and 2nd Quarters for Global Company\nq1 = {'Japan': 80, 'China': 450, 'India': 200, 'USA': 250}\nq2 = {'Brazil': 100,'China': 500, 'India': 210,'USA': 260}\n\n\n# Creating a Series from a Dictionary q1 and q2\nq1_series= pd.Series(q1)\nq2_series= pd.Series(q2)\n\n\nprint(q1_series)\n\nJapan     80\nChina    450\nIndia    200\nUSA      250\ndtype: int64\n\n\nKita dapat mengindeks dengan label\n\n# call values of q1_series based on named index\nprint(q1_series['Japan'])\nprint(q1_series['China'])\nprint(q1_series['India'])\n\n80\n450\n200\n\n\nkita dapat tetap dapat mengindeks dengan integer\n\n# u can also call values of q1_series based on positional index\nprint(q1_series[0])\nprint(q1_series[1])\nprint(q1_series[2])\n\n80\n450\n200\n\n\nhati-hati dalam melakukan indexing dengan label. bisa saja terjadi error jika label tidak ada di dalam pd.series\n\n# remember named index is case sensitive\ntry:\n    print(q1_series['japan'])\nexcept:\n    print('something went wrong')\n\nsomething went wrong\n\n\nOperasi aritmatik sederhana pada pd.Series bersifat broadcasting\n\n# operations with arithmetic on series are broadcasted to all values\nprint(q1_series*2)\n\nJapan    160\nChina    900\nIndia    400\nUSA      500\ndtype: int64\n\n\n\nprint(q1_series+1000)\n\nJapan    1080\nChina    1450\nIndia    1200\nUSA      1250\ndtype: int64\n\n\n\n# operation between series are also broadcasted\nprint(q1_series+q2_series)\n\nBrazil      NaN\nChina     950.0\nIndia     410.0\nJapan       NaN\nUSA       510.0\ndtype: float64\n\n\n\nprint(q1_series.add(q2_series, fill_value=0))\n\nBrazil    100.0\nChina     950.0\nIndia     410.0\nJapan      80.0\nUSA       510.0\ndtype: float64\n\n\n\n\n\n\nSebuah pd.DataFrame terdiri dari beberapa pd.Series yang berbagi nilai indeks.\n\nmy_data= np.random.randint(0,100,12).reshape(4,3)\nmy_data\n\narray([[25, 59, 18],\n       [75, 54, 65],\n       [29, 21,  7],\n       [32, 69, 16]])\n\n\nKita akan membuat pd.Dataframe melalui python list. Perhatikan bahwa kita dapat memberikan nama pada kolom dan baris\n\nmy_index= [\"jakarta\", \"bandung\", \"surabaya\", \"medan\"]\nmy_columns= [\"apple\", \"orange\", \"banana\"]\n\ndf= pd.DataFrame(data=my_data, index=my_index, columns=my_columns)\ndf\n\n\n\n\n\n  \n    \n      \n      apple\n      orange\n      banana\n    \n  \n  \n    \n      jakarta\n      25\n      59\n      18\n    \n    \n      bandung\n      75\n      54\n      65\n    \n    \n      surabaya\n      29\n      21\n      7\n    \n    \n      medan\n      32\n      69\n      16\n    \n  \n\n\n\n\n\ndf_2= pd.DataFrame(data=my_data)\ndf_2\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      25\n      59\n      18\n    \n    \n      1\n      75\n      54\n      65\n    \n    \n      2\n      29\n      21\n      7\n    \n    \n      3\n      32\n      69\n      16\n    \n  \n\n\n\n\n\ndf_3= pd.DataFrame(data=my_data, columns=my_columns)\ndf_3\n\n\n\n\n\n  \n    \n      \n      apple\n      orange\n      banana\n    \n  \n  \n    \n      0\n      25\n      59\n      18\n    \n    \n      1\n      75\n      54\n      65\n    \n    \n      2\n      29\n      21\n      7\n    \n    \n      3\n      32\n      69\n      16\n    \n  \n\n\n\n\n\n\nJika berkas .py atau .ipynb Anda berada di lokasi folder yang sama persis dengan berkas .csv yang ingin Anda baca, cukup berikan nama berkas sebagai string, misalnya:\ndf = pd.read_csv('[some_file.csv')\nBerikan s berkas jika Anda berada di direktori yang berbeda. Jalur berkas harus 100% benar agar ini berfungsi. Misalnya:\ndf = pd.read_csv(\"C:\\\\Users\\\\myself\\\\files\\\\some_file.csv\")\nsebelum itu, kalian dapat mendownload data tersebut melalui link berikut\nDownload\n\npwd\n\n'c:\\\\Users\\\\user\\\\Documents\\\\root\\\\personal\\\\github-personal\\\\sains-data-2023\\\\main-module'\n\n\n\ndf_tips= pd.read_csv('./data/tips.csv')\n\n\ndf_tips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n      9.68\n      Michael Avila\n      5296068606052842\n      Sat2657\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n      13.59\n      Monica Sanders\n      3506806155565404\n      Sat1766\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n      11.34\n      Keith Wong\n      6011891618747196\n      Sat3880\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n      8.91\n      Dennis Dixon\n      4375220550950\n      Sat17\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n      9.39\n      Michelle Hardin\n      3511451626698139\n      Thur672\n    \n  \n\n244 rows × 11 columns\n\n\n\n\n\n\n\n# mengecek nama kolom\ndf_tips.columns\n\nIndex(['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size',\n       'price_per_person', 'Payer Name', 'CC Number', 'Payment ID'],\n      dtype='object')\n\n\n\n# mengecek \ndf_tips.index\n\nRangeIndex(start=0, stop=244, step=1)\n\n\n\ndf_tips.head(5)\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n    \n  \n\n\n\n\n\ndf_tips.tail(5)\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n      9.68\n      Michael Avila\n      5296068606052842\n      Sat2657\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n      13.59\n      Monica Sanders\n      3506806155565404\n      Sat1766\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n      11.34\n      Keith Wong\n      6011891618747196\n      Sat3880\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n      8.91\n      Dennis Dixon\n      4375220550950\n      Sat17\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n      9.39\n      Michelle Hardin\n      3511451626698139\n      Thur672\n    \n  \n\n\n\n\n\ndf_tips.describe().transpose()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n  \n  \n    \n      total_bill\n      244.0\n      1.978594e+01\n      8.902412e+00\n      3.070000e+00\n      1.334750e+01\n      1.779500e+01\n      2.412750e+01\n      5.081000e+01\n    \n    \n      tip\n      244.0\n      2.998279e+00\n      1.383638e+00\n      1.000000e+00\n      2.000000e+00\n      2.900000e+00\n      3.562500e+00\n      1.000000e+01\n    \n    \n      size\n      244.0\n      2.569672e+00\n      9.510998e-01\n      1.000000e+00\n      2.000000e+00\n      2.000000e+00\n      3.000000e+00\n      6.000000e+00\n    \n    \n      price_per_person\n      244.0\n      7.888197e+00\n      2.914234e+00\n      2.880000e+00\n      5.800000e+00\n      7.255000e+00\n      9.390000e+00\n      2.027000e+01\n    \n    \n      CC Number\n      244.0\n      2.563496e+15\n      2.369340e+15\n      6.040679e+10\n      3.040731e+13\n      3.525318e+15\n      4.553675e+15\n      6.596454e+15\n    \n  \n\n\n\n\n\n\n\n\n\n\n\ndf_tips.head(5)\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n    \n  \n\n\n\n\n\nprint(df_tips[\"size\"] ==3)\nconditional_size = df_tips[\"size\"] ==3\n\n0      False\n1       True\n2       True\n3      False\n4      False\n       ...  \n239     True\n240    False\n241    False\n242    False\n243    False\nName: size, Length: 244, dtype: bool\n\n\n\ndf_tips[conditional_size].head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      16\n      10.33\n      1.67\n      Female\n      No\n      Sun\n      Dinner\n      3\n      3.44\n      Elizabeth Foster\n      4240025044626033\n      Sun9715\n    \n    \n      17\n      16.29\n      3.71\n      Male\n      No\n      Sun\n      Dinner\n      3\n      5.43\n      John Pittman\n      6521340257218708\n      Sun2998\n    \n    \n      18\n      16.97\n      3.50\n      Female\n      No\n      Sun\n      Dinner\n      3\n      5.66\n      Laura Martinez\n      30422275171379\n      Sun2789\n    \n  \n\n\n\n\n\nconditional= (df_tips[\"size\"]==3) & (df_tips[\"total_bill\"]>20)\nprint(conditional)\n\n0      False\n1      False\n2       True\n3      False\n4      False\n       ...  \n239     True\n240    False\n241    False\n242    False\n243    False\nLength: 244, dtype: bool\n\n\n\ndf_tips[conditional].head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      19\n      20.65\n      3.35\n      Male\n      No\n      Sat\n      Dinner\n      3\n      6.88\n      Timothy Oneal\n      6568069240986485\n      Sat9213\n    \n    \n      35\n      24.06\n      3.60\n      Male\n      No\n      Sat\n      Dinner\n      3\n      8.02\n      Joseph Mullins\n      5519770449260299\n      Sat632\n    \n    \n      39\n      31.27\n      5.00\n      Male\n      No\n      Sat\n      Dinner\n      3\n      10.42\n      Mr. Brandon Berry\n      6011525851069856\n      Sat6373\n    \n    \n      48\n      28.55\n      2.05\n      Male\n      No\n      Sun\n      Dinner\n      3\n      9.52\n      Austin Fisher\n      6011481668986587\n      Sun4142\n    \n  \n\n\n\n\n\ndf_tips[(df_tips[\"size\"]==3) & (df_tips[\"total_bill\"]>20)].head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      19\n      20.65\n      3.35\n      Male\n      No\n      Sat\n      Dinner\n      3\n      6.88\n      Timothy Oneal\n      6568069240986485\n      Sat9213\n    \n    \n      35\n      24.06\n      3.60\n      Male\n      No\n      Sat\n      Dinner\n      3\n      8.02\n      Joseph Mullins\n      5519770449260299\n      Sat632\n    \n    \n      39\n      31.27\n      5.00\n      Male\n      No\n      Sat\n      Dinner\n      3\n      10.42\n      Mr. Brandon Berry\n      6011525851069856\n      Sat6373\n    \n    \n      48\n      28.55\n      2.05\n      Male\n      No\n      Sun\n      Dinner\n      3\n      9.52\n      Austin Fisher\n      6011481668986587\n      Sun4142\n    \n  \n\n\n\n\n\nweekend= [\"Sun\", \"Sat\"]\nconditional_in= df_tips[\"day\"].isin(weekend)\ndf_tips[conditional_in].head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n    \n  \n\n\n\n\n\ndf_tips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n    \n  \n\n\n\n\n\n\n\n\ndf_tips[\"day\"].unique()\n\narray(['Sun', 'Sat', 'Thur', 'Fri'], dtype=object)\n\n\n\ndf_tips.drop_duplicates([\"day\",\"time\"])[[\"day\",\"time\"]]\n\n\n\n\n\n  \n    \n      \n      day\n      time\n    \n  \n  \n    \n      0\n      Sun\n      Dinner\n    \n    \n      19\n      Sat\n      Dinner\n    \n    \n      77\n      Thur\n      Lunch\n    \n    \n      90\n      Fri\n      Dinner\n    \n    \n      220\n      Fri\n      Lunch\n    \n    \n      243\n      Thur\n      Dinner\n    \n  \n\n\n\n\n\n\n\n\n\n\n\nprint(df_tips[\"day\"])\nprint(\"=======\")\nprint(df_tips.day)\n\n0       Sun\n1       Sun\n2       Sun\n3       Sun\n4       Sun\n       ... \n239     Sat\n240     Sat\n241     Sat\n242     Sat\n243    Thur\nName: day, Length: 244, dtype: object\n=======\n0       Sun\n1       Sun\n2       Sun\n3       Sun\n4       Sun\n       ... \n239     Sat\n240     Sat\n241     Sat\n242     Sat\n243    Thur\nName: day, Length: 244, dtype: object\n\n\n\ndf_tips[[\"day\",\"time\"]]\n\n\n\n\n\n  \n    \n      \n      day\n      time\n    \n  \n  \n    \n      0\n      Sun\n      Dinner\n    \n    \n      1\n      Sun\n      Dinner\n    \n    \n      2\n      Sun\n      Dinner\n    \n    \n      3\n      Sun\n      Dinner\n    \n    \n      4\n      Sun\n      Dinner\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      239\n      Sat\n      Dinner\n    \n    \n      240\n      Sat\n      Dinner\n    \n    \n      241\n      Sat\n      Dinner\n    \n    \n      242\n      Sat\n      Dinner\n    \n    \n      243\n      Thur\n      Dinner\n    \n  \n\n244 rows × 2 columns\n\n\n\n\n\n\n\ndf_tips[\"tips_percentage\"]= df_tips[\"tip\"]/df_tips[\"total_bill\"]*100\n\ndf_tips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n      tips_percentage\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n      5.944673\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n      16.054159\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n      16.658734\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n      13.978041\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n      14.680765\n    \n  \n\n\n\n\n\n\n\n\ndf_tips.rename(columns={\"tips_percentage\":\"tips_percentage_%\"}, inplace=True)\ndf_tips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n      Payment ID\n      tips_percentage_%\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n      Sun2959\n      5.944673\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n      Sun4608\n      16.054159\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n      Sun4458\n      16.658734\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n      Sun5260\n      13.978041\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n      Sun2251\n      14.680765\n    \n  \n\n\n\n\n\n\n\n\n#relocate tips_percentage_% column to the rightmost\ncols= list(df_tips.columns)\ncols= [cols[-1]]+ cols[:-2]\n\ndf_tips= df_tips[cols]\n\n\ndf_tips\n\n\n\n\n\n  \n    \n      \n      tips_percentage_%\n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      price_per_person\n      Payer Name\n      CC Number\n    \n  \n  \n    \n      0\n      5.944673\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      8.49\n      Christy Cunningham\n      3560325168603410\n    \n    \n      1\n      16.054159\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      3.45\n      Douglas Tucker\n      4478071379779230\n    \n    \n      2\n      16.658734\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      7.00\n      Travis Walters\n      6011812112971322\n    \n    \n      3\n      13.978041\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      11.84\n      Nathaniel Harris\n      4676137647685994\n    \n    \n      4\n      14.680765\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      6.15\n      Tonya Carter\n      4832732618637221\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      20.392697\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n      9.68\n      Michael Avila\n      5296068606052842\n    \n    \n      240\n      7.358352\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n      13.59\n      Monica Sanders\n      3506806155565404\n    \n    \n      241\n      8.822232\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n      11.34\n      Keith Wong\n      6011891618747196\n    \n    \n      242\n      9.820426\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n      8.91\n      Dennis Dixon\n      4375220550950\n    \n    \n      243\n      15.974441\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n      9.39\n      Michelle Hardin\n      3511451626698139\n    \n  \n\n244 rows × 11 columns"
  },
  {
    "objectID": "main-module/week-02.html",
    "href": "main-module/week-02.html",
    "title": "sains-data-2023",
    "section": "",
    "text": "Pada modul ini kita akan mempelajari beberapa cara untuk membuat visualisasi data menggunakan package Matplotlib dan Seaborn. Seaborn merupakan salah satu package visualisasi data yang sangat sering digunakan karena fleksibilitas dan banyaknya jenis plot yang disediakan.\n\n\n\n\nSebelum memulai, mari kita import terlebih dahulu module - module yang diperlukan.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\nPada module kali ini, akan digunakan tiga data csv yang berbeda untuk mempermudah kebutuhan visualisasi.\nKetiga data tersebut dapat kalian unduh pada tautan berikut: https://bit.ly/DataWeek2\n\nspotify_df = pd.read_csv('data/week 2/spotify.csv', index_col='Date', parse_dates=['Date'])\nflight_df = pd.read_csv('data/week 2/flight_delays.csv')\ninsurance_df = pd.read_csv('data/week 2/insurance.csv')\n\n\n\n\n\nSeperti yang sudah dipelajari pada Algoritma dan Pemrograman, visualisasi data dapat dilakukan dengan module matplotlib, antara lain untuk membuat line plot dan scatter plot.\nPertama, kita akan menggunakan data Spotify, yaitu data total daily streams 5 lagu hits pada masanya.\n\nspotify_df\n\n\n\n\n\n  \n    \n      \n      Shape of You\n      Despacito\n      Something Just Like This\n      HUMBLE.\n      Unforgettable\n    \n    \n      Date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2017-01-06\n      12287078\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2017-01-07\n      13190270\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2017-01-08\n      13099919\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2017-01-09\n      14506351\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2017-01-10\n      14275628\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2018-01-05\n      4492978\n      3450315.0\n      2408365.0\n      2685857.0\n      2869783.0\n    \n    \n      2018-01-06\n      4416476\n      3394284.0\n      2188035.0\n      2559044.0\n      2743748.0\n    \n    \n      2018-01-07\n      4009104\n      3020789.0\n      1908129.0\n      2350985.0\n      2441045.0\n    \n    \n      2018-01-08\n      4135505\n      2755266.0\n      2023251.0\n      2523265.0\n      2622693.0\n    \n    \n      2018-01-09\n      4168506\n      2791601.0\n      2058016.0\n      2727678.0\n      2627334.0\n    \n  \n\n366 rows × 5 columns\n\n\n\nBerikut adalah cara untuk membuat line plot pada satu fitur di dataframe menggunakan matplotlib\n\n\"\"\"\nMembuat line plot untuk lagu Shape of You menggunakan matplotlib\n\"\"\"\n\n# Mengatur besar figur plot\nplt.subplots(figsize=(8,6))\n\n# Membuat line plot\nplt.plot(spotify_df['Shape of You'], 'b')\n# Membuat label sumbu-x dan sumbu-y\nplt.xlabel('Date')\nplt.ylabel('Shape of You Total Daily Streams')\n# Menampilkan plot\nplt.show()\n\n\n\n\nApabila kita ingin menampilkan fitur-fitur lain dalam figur yang sama, kita dapat memanfaatkan loop\n\n\"\"\"\nMembuat line plot untuk semua lagu dalam spotify_df menggunakan loop\n\"\"\"\n\nplt.subplots(figsize=(8,6))\n\n# Loop setiap nama kolom pada dataframe, lalu plot\nfor column in spotify_df.columns:\n    plt.plot(spotify_df[column])\n\nplt.legend(spotify_df.columns)\nplt.show()\n\n\n\n\nNamun, terdapat cara yang lebih mudah selain menggunakan looping. pandas dataframe memiliki method yang dapat secara langsung memvisualisasikan keseluruhan fiturnya, yaitu .plot().\nPada .plot() kita memiliki beberapa parameter yang dapat diatur, antara lain kind dan figsize. kind berfungsi untuk mengatur jenis plot yang ingin kita buat, sedangkan figsize berfungsi untuk mengatur besar figur yang dihasilkan.\nParameter lainnya dapat dilihat pada: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html\n\n\"\"\"\nMembuat line plot untuk semua lagu dalam spotify_df menggunakan pandas .plot()\n\"\"\"\n\nspotify_df.plot(kind='line', figsize=(8,6))\nplt.xlabel('Date')\nplt.ylabel('Total Daily Streams')\nplt.show()\n\n\n\n\nSelain line plot, terdapat banyak macam kind yang bisa digunakan. Pada code cell dibawah terlihat bahwa pandas .plot() dapat menghasilkan histogram (perlu diperhatikan bahwa jenis plot perlu menyesuaikan tipe data yang dimiliki, terlihat bahwa menggunakan data spotify, histogram tidak menghasilkan insight yang cukup berguna).\n\nspotify_df.plot(kind='hist', figsize=(8,6), alpha=.7)\n\nplt.show()\n\n\n\n\nPada praktikum Algoritma dan Pemrograman kita juga telah mempelajari cara untuk membuat scatter plot. Berikut code untuk membuat scatter plot menggunakan matplotlib, untuk melihat korelasi antara daily streams lagu Shape of You dengan Something Just Like This.\n\n\"\"\"\nMembuat scatter plot untuk melihat korelasi antara lagu\nShape of You dengan Something Just Like This menggunakan\nmatplotlib\n\"\"\"\n\nplt.subplots(figsize=(8,6))\n\nplt.scatter(x=spotify_df['Shape of You'], \n            y=spotify_df['Something Just Like This'],\n            alpha=.5)\nplt.xlabel('\"Shape of You\" Total Daily Streams')\nplt.ylabel('\"Something Just Like This\" Total Daily Streams')\nplt.show()\n\n\n\n\n\n\n\nWalaupun matplotlib cukup fleksibel dalam menghasilkan plot, tetapi tipe plot yang disediakan cenderung terbatas. Oleh karena itu, kita dapat menggunakan Seaborn karena tipe plot yang disediakan sangat banyak sesuai kebutuhan kita, antara lain line, bar, heatmap, scatter, box, swarm, histogram, density, dan masih banyak lagi.\n\n\nLine plot biasa digunakan untuk melihat trend data dalam jangka waktu tertentu.\nUntuk membuat line plot pada seaborn, kita dapat menggunakan sns.lineplot(). Jika data yang ingin kita visualisasikan adalah dataframe, kita dapat memasukkan variabel dataframe tersebut pada parameter data, seperti code di bawah ini.\n\n\"\"\"\nMembuat line plot dengan module seaborn\n\"\"\"\n\nplt.subplots(figsize=(8,6))\nsns.lineplot(data=spotify_df)\nplt.show()\n\n\n\n\nFleksibilitas Seaborn membuat kita dapat memilih color palette yang sesuai dengan keinginan kita. Kita dapat memilih palette yang sudah disediakan oleh seaborn (antara lain: bright, deep, pastel, dan masih banyak lagi) atau kita dapat mengatur sendiri palette yang ingin kita gunakan.\nUntuk memilih palette yang akan digunakan untuk plot selanjutnya pada seaborn, kita dapat menggunakan sns.set_palette().\nJenis palette yang disediakan seaborn serta cara membuat color palette secara mandiri dapat dilihat pada: https://seaborn.pydata.org/tutorial/color_palettes.html#tools-for-choosing-color-palettes\n\n# Mengganti color palette menjadi \"bright\"\nsns.set_palette('bright')\n\n\n\"\"\"\nMembuat line plot setelah color palette diubah menjadi \"bright\"\n\"\"\"\n\n# Mengatur besar figur yang ingin ditampilkan\nplt.figure(figsize=(14,6))\n\n# Membuat line plot\nsns.lineplot(data=spotify_df)\n# Membuat judul figur\nplt.title(\"Daily Global Streams of Popular Songs in 2017-2018\")\n# Menampilkan plot\nplt.show()\n\n\n\n\nApabila tidak semua fitur pada data ingin kita visualisasikan, kita dapat menggunakan sns.lineplot() beberapa kali, sesuai dengan banyaknya fitur yang ingin kita tampilkan, seperti pada code di bawah.\n\nplt.figure(figsize=(14,6))\n\n# Membuat line plot hanya dengan lagu Shape of You\nsns.lineplot(data=spotify_df['Shape of You'], label=\"Shape of You\")\n# Menambahkan line plot pada figur dengan lagu Despacito\nsns.lineplot(data=spotify_df['Despacito'], label=\"Despacito\")\n\nplt.title(\"Daily Global Streams of Popular Songs in 2017-2018\")\nplt.xlabel(\"Date\")\nplt.ylabel('')\nplt.show()\n\n\n\n\n\n\n\nBar plot biasa digunakan untuk membandingkan kuantitas/nilai pada data bertipe kategori.\nSelanjutnya, kita akan menggunakan data flight_delays.csv, yaitu data rata-rata keterlambatan beberapa maskapai pesawat pada setiap bulannya.\n\nflight_df\n\n\n\n\n\n  \n    \n      \n      Month\n      AA\n      AS\n      B6\n      DL\n      EV\n      F9\n      HA\n      MQ\n      NK\n      OO\n      UA\n      US\n      VX\n      WN\n    \n  \n  \n    \n      0\n      1\n      6.955843\n      -0.320888\n      7.347281\n      -2.043847\n      8.537497\n      18.357238\n      3.512640\n      18.164974\n      11.398054\n      10.889894\n      6.352729\n      3.107457\n      1.420702\n      3.389466\n    \n    \n      1\n      2\n      7.530204\n      -0.782923\n      18.657673\n      5.614745\n      10.417236\n      27.424179\n      6.029967\n      21.301627\n      16.474466\n      9.588895\n      7.260662\n      7.114455\n      7.784410\n      3.501363\n    \n    \n      2\n      3\n      6.693587\n      -0.544731\n      10.741317\n      2.077965\n      6.730101\n      20.074855\n      3.468383\n      11.018418\n      10.039118\n      3.181693\n      4.892212\n      3.330787\n      5.348207\n      3.263341\n    \n    \n      3\n      4\n      4.931778\n      -3.009003\n      2.780105\n      0.083343\n      4.821253\n      12.640440\n      0.011022\n      5.131228\n      8.766224\n      3.223796\n      4.376092\n      2.660290\n      0.995507\n      2.996399\n    \n    \n      4\n      5\n      5.173878\n      -1.716398\n      -0.709019\n      0.149333\n      7.724290\n      13.007554\n      0.826426\n      5.466790\n      22.397347\n      4.141162\n      6.827695\n      0.681605\n      7.102021\n      5.680777\n    \n    \n      5\n      6\n      8.191017\n      -0.220621\n      5.047155\n      4.419594\n      13.952793\n      19.712951\n      0.882786\n      9.639323\n      35.561501\n      8.338477\n      16.932663\n      5.766296\n      5.779415\n      10.743462\n    \n    \n      6\n      7\n      3.870440\n      0.377408\n      5.841454\n      1.204862\n      6.926421\n      14.464543\n      2.001586\n      3.980289\n      14.352382\n      6.790333\n      10.262551\n      NaN\n      7.135773\n      10.504942\n    \n    \n      7\n      8\n      3.193907\n      2.503899\n      9.280950\n      0.653114\n      5.154422\n      9.175737\n      7.448029\n      1.896565\n      20.519018\n      5.606689\n      5.014041\n      NaN\n      5.106221\n      5.532108\n    \n    \n      8\n      9\n      -1.432732\n      -1.813800\n      3.539154\n      -3.703377\n      0.851062\n      0.978460\n      3.696915\n      -2.167268\n      8.000101\n      1.530896\n      -1.794265\n      NaN\n      0.070998\n      -1.336260\n    \n    \n      9\n      10\n      -0.580930\n      -2.993617\n      3.676787\n      -5.011516\n      2.303760\n      0.082127\n      0.467074\n      -3.735054\n      6.810736\n      1.750897\n      -2.456542\n      NaN\n      2.254278\n      -0.688851\n    \n    \n      10\n      11\n      0.772630\n      -1.916516\n      1.418299\n      -3.175414\n      4.415930\n      11.164527\n      -2.719894\n      0.220061\n      7.543881\n      4.925548\n      0.281064\n      NaN\n      0.116370\n      0.995684\n    \n    \n      11\n      12\n      4.149684\n      -1.846681\n      13.839290\n      2.504595\n      6.685176\n      9.346221\n      -1.706475\n      0.662486\n      12.733123\n      10.947612\n      7.012079\n      NaN\n      13.498720\n      6.720893\n    \n  \n\n\n\n\nUntuk membuat bar plot pada seaborn dengan dataframe, kita dapat menggunakan sns.barplot() dengan tiga parameter yang wajib kita set, yaitu:\n- data: dataframe yang ingin kita visualisasikan\n\n- x: nama fitur pada dataframe yang ingin kita jadikan sumbu-x\n\n- y: nama fitur pada dataframe yang ingin kita jadikan sumbu-y\nPada kode di bawah, juga digunakan satu parameter opsional, yaitu palette yang merupakan cara lain untuk mengatur color palette yang ingin kita gunakan\n\n\"\"\"\nMembuat bar plot keterlambatan maskapai EV setiap \nbulannya menggunakan seaborn\n\"\"\"\n\nplt.figure(figsize=(14,6))\n\nsns.barplot(data=flight_df, x='Month', y='EV',\n            palette=sns.color_palette('deep'))\nplt.ylabel('EV Flight Delays (minute)')\nplt.title('Average EV Flight Delays per Month')\nplt.show()\n\n\n\n\nBerdasarkan hasil plot di atas, terlihat bahwa maskapai EV memiliki rata-rata keterlambatan terlama pada bulan Juni, serta tercepat pada bulan September.\nSelanjutnya, mari kita coba lihat urutan rata-rata keterlambatan semua maskapai dalam satu tahun (maskapai mana yang memiliki rata-rata keterlambatan terlama, serta maskapai mana yang tercepat).\nHal pertama yang perlu kita lakukan adalah, jadikan fitur Month sebagai index dataframe.\n\n# Set fitur \"Month\" menjadi index dataframe\nflight_df = flight_df.set_index('Month')\nflight_df.head(2)\n\n\n\n\n\n  \n    \n      \n      AA\n      AS\n      B6\n      DL\n      EV\n      F9\n      HA\n      MQ\n      NK\n      OO\n      UA\n      US\n      VX\n      WN\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      6.955843\n      -0.320888\n      7.347281\n      -2.043847\n      8.537497\n      18.357238\n      3.512640\n      18.164974\n      11.398054\n      10.889894\n      6.352729\n      3.107457\n      1.420702\n      3.389466\n    \n    \n      2\n      7.530204\n      -0.782923\n      18.657673\n      5.614745\n      10.417236\n      27.424179\n      6.029967\n      21.301627\n      16.474466\n      9.588895\n      7.260662\n      7.114455\n      7.784410\n      3.501363\n    \n  \n\n\n\n\nSelanjutnya, kita perlu hitung rata-rata keterlambatan tiap maskapai dalam satu tahun, yaitu hitung rata-rata tiap kolom pada dataframe menggunakan .mean() (Tambahan: apabila kita ingin menghitung rata-rata tiap barisnya, kita dapat menggunakan parameter axis=1 pada .mean()). .mean() akan menghasilkan pandas Series.\nLalu, agar mempermudah kita dalam melihat visualisasi bar plotnya, kita dapat menggunakan .sort_values().\n\n# Simpan rata-rata keterlambatan semua maskapai dalam satu tahun pada variabel flight_mean_inyear\nflight_mean_inyear = flight_df.mean()\n# Urutkan flight_mean_inyear secara ascending\nflight_mean_inyear = flight_mean_inyear.sort_values()\n\nflight_mean_inyear\n\nAS    -1.023656\nDL     0.231116\nHA     1.993205\nUS     3.776815\nAA     4.120776\nWN     4.275277\nVX     4.717718\nUA     5.413415\nOO     5.909658\nMQ     5.964953\nEV     6.543328\nB6     6.788370\nF9    13.035736\nNK    14.549663\ndtype: float64\n\n\nTerakhir, visualisasikan bar plot menggunakan cara seperti sebelumnya.\nKita dapat lihat pada code dibawah bahwa tidak digunakan parameter data, karena flight_mean_inyear merupakan pandas Series (bukan dataframe) sehingga lebih mudah jika kita langsung menggunakan parameter x dan y saja.\n\nplt.subplots(figsize=(14,6))\nsns.barplot(x=flight_mean_inyear.index, \n            y=flight_mean_inyear.values,\n            palette=sns.color_palette('deep'))\nplt.title('Average Delay per Flight in a Year')\nplt.show()\n\n\n\n\nBerdasarkan plot diatas, NK merupakan maskapai dengan rata-rata keterlambatan terlama dalam satu tahun, sedangkan AS adalah yang tercepat (AS bernilai negatif yang berarti rata-rata kedatangan pesawat lebih cepat dari yang dijadwalkan dalam satu tahun.\n\n\n\nHeatmap biasa digunakan untuk mempermudah melihat pola pada data berdasarkan warna yang dihasilkan.\nPada seaborn, kita dapat menggunakan heatmap dengan sns.heatmap() seperti pada kode dibawah. Parameter annot berfungsi untuk menampilkan nilai data (jika True) atau tidak (jika False).\nBar sebelah kanan heatmap menunjukkan bahwa, semakin lama keterlambatan pesawat, maka warna yang dihasilkan semakin terang. Sebaliknya, semakin gelap warna yang dihasilkan berarti semakin cepat pesawat datang tersebut.\n\n\"\"\"\nMembuat heatmap menggunakan Seaborn\n\"\"\"\nplt.figure(figsize=(14,10))\n\nsns.heatmap(data=flight_df, annot=True)\nplt.title(\"Average Arrival Delay for Each Airline, by Month\")\nplt.xlabel(\"Airline\")\nplt.show()\n\n\n\n\nBerdasarkan heatmap di atas, kita dapat melihat dengan mudah pada bulan apa suatu maskapai sangat terlambat (contoh: maskapai NK pada bulan Juni).\nHeatmap sangat sering digunakan untuk melihat korelasi antarfitur pada dataset agar kita dapat mengerti lebih jauh tentang fitur-fitur pada data, atau juga dapat dimanfaatkan untuk melakukan feature selection sebelum membuat sebuat model Machine Learning.\nUntuk melakukan hal tersebut, kita perlu menghitung dahulu korelasi antar fitur menggunakan pandas .corr(), yaitu fungsi yang akan menghitung korelasi antar dua fitur menggunakan korelasi Pearson.\nNotes: Metode korelasi dapat diubah dengan menggunakan parameter method pada .corr(), contoh: .corr(method='spearman'). Metode lainnya dapat dilihat pada: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.corr.html\n\n# Hitung korelasi antar dua fitur pada flight_df\nflight_corr = flight_df.corr()\n\nflight_corr\n\n\n\n\n\n  \n    \n      \n      AA\n      AS\n      B6\n      DL\n      EV\n      F9\n      HA\n      MQ\n      NK\n      OO\n      UA\n      US\n      VX\n      WN\n    \n  \n  \n    \n      AA\n      1.000000\n      0.334980\n      0.429854\n      0.805229\n      0.896523\n      0.903986\n      0.220065\n      0.842701\n      0.573716\n      0.620477\n      0.809874\n      0.823713\n      0.425237\n      0.615664\n    \n    \n      AS\n      0.334980\n      1.000000\n      0.340359\n      0.394359\n      0.356608\n      0.336791\n      0.684979\n      0.283977\n      0.480863\n      0.350657\n      0.457414\n      0.489025\n      0.229571\n      0.519228\n    \n    \n      B6\n      0.429854\n      0.340359\n      1.000000\n      0.643313\n      0.342627\n      0.510718\n      0.467905\n      0.529724\n      0.032038\n      0.591115\n      0.233021\n      0.788345\n      0.579750\n      0.151750\n    \n    \n      DL\n      0.805229\n      0.394359\n      0.643313\n      1.000000\n      0.796951\n      0.783265\n      0.262251\n      0.598765\n      0.625277\n      0.569073\n      0.797339\n      0.821757\n      0.700605\n      0.691805\n    \n    \n      EV\n      0.896523\n      0.356608\n      0.342627\n      0.796951\n      1.000000\n      0.828515\n      0.099369\n      0.721468\n      0.784026\n      0.692697\n      0.911499\n      0.669736\n      0.462638\n      0.730115\n    \n    \n      F9\n      0.903986\n      0.336791\n      0.510718\n      0.783265\n      0.828515\n      1.000000\n      0.273878\n      0.912984\n      0.414064\n      0.582509\n      0.671986\n      0.878874\n      0.308397\n      0.465765\n    \n    \n      HA\n      0.220065\n      0.684979\n      0.467905\n      0.262251\n      0.099369\n      0.273878\n      1.000000\n      0.436015\n      0.176485\n      0.056941\n      0.066821\n      0.586160\n      -0.008439\n      -0.007296\n    \n    \n      MQ\n      0.842701\n      0.283977\n      0.529724\n      0.598765\n      0.721468\n      0.912984\n      0.436015\n      1.000000\n      0.281890\n      0.586963\n      0.503575\n      0.660181\n      0.150111\n      0.239744\n    \n    \n      NK\n      0.573716\n      0.480863\n      0.032038\n      0.625277\n      0.784026\n      0.414064\n      0.176485\n      0.281890\n      1.000000\n      0.365273\n      0.827455\n      0.293515\n      0.395419\n      0.742869\n    \n    \n      OO\n      0.620477\n      0.350657\n      0.591115\n      0.569073\n      0.692697\n      0.582509\n      0.056941\n      0.586963\n      0.365273\n      1.000000\n      0.626051\n      0.590313\n      0.561515\n      0.548304\n    \n    \n      UA\n      0.809874\n      0.457414\n      0.233021\n      0.797339\n      0.911499\n      0.671986\n      0.066821\n      0.503575\n      0.827455\n      0.626051\n      1.000000\n      0.477816\n      0.536968\n      0.926800\n    \n    \n      US\n      0.823713\n      0.489025\n      0.788345\n      0.821757\n      0.669736\n      0.878874\n      0.586160\n      0.660181\n      0.293515\n      0.590313\n      0.477816\n      1.000000\n      0.333396\n      0.242344\n    \n    \n      VX\n      0.425237\n      0.229571\n      0.579750\n      0.700605\n      0.462638\n      0.308397\n      -0.008439\n      0.150111\n      0.395419\n      0.561515\n      0.536968\n      0.333396\n      1.000000\n      0.630278\n    \n    \n      WN\n      0.615664\n      0.519228\n      0.151750\n      0.691805\n      0.730115\n      0.465765\n      -0.007296\n      0.239744\n      0.742869\n      0.548304\n      0.926800\n      0.242344\n      0.630278\n      1.000000\n    \n  \n\n\n\n\nPandas .corr() menghasilkan dataframe dengan nama baris dan kolom yang sama, serta berisi nilai korelasi antara baris dan kolom yang ditinjau (contoh: korelasi antara maskapai AA dan AS adalah 0,334980). Serta, dataframe yang dihasilkan adalah sebuat matriks simetris.\nTentu dengan hanya melihat dataframe di atas, tidak terlihat begitu jelas mana fitur yang memiliki korelasi tinggi dan mana yang yang memiliki korelasi rendah. Oleh karena itu, kita dapat memanfaatkan heatmap.\nPada code di bawah, untuk mempermudah pembacaan heatmap, kita menggunakan parameter vmin, vmax, dan center pada sns.heatmap(). vmin berfungsi untuk mengatur nilai terendah, vmax berfungsi untuk mengatur nilai tertinggi, dan center berfungsi untuk mengatur nilai tengah pada heatmap. Korelasi Pearson menghasilkan nilai antara -1 hingga 1, sehingga kita dapat set ketiga parameter tersebut seperti pada code di bawah.\n\nplt.figure(figsize=(14,10))\n\nsns.heatmap(data=flight_corr, vmin=-1, vmax=1, center=0, annot=True)\nplt.title(\"Pearson Correlation of Each Airline Flight Delays\")\nplt.xlabel(\"Airline\")\nplt.show()\n\n\n\n\nDengan menggunakan heatmap, sekarang terlihat bahwa mana maskapai yang keterlambatannya berkorelasi tinggi dan mana yang rendah. Misal, AA dan EV menghasilkan korelasi yang cukup tinggi positif, yaitu 0.9, yang artinya jika keterlambatan maskapai AA tinggi, begitu juga maskapai EV, dan sebaliknya jika keterlambatan maskapai AA rendah, begitu juga maskapai EV.\nUntuk meyakinkan kita dengan hal tersebut, kita dapat lihat pada materi selanjutnya, yaitu Scatter Plot.\n\n\n\nScatter plot biasa digunakan untuk melihat korelasi antara dua fitur bertipe numerik.\nUntuk menggunakan scatter plot pada seaborn, kita dapat menggunakan sns.scatterplot(), dengan parameter yang sama seperti kita membuat bar plot.\n\n\"\"\"\nMembuat scatter plot untuk melihat \nketerkaitan pada keterlambatan pesawat\nmaskapai EV dan AA\n\"\"\"\n\nsns.scatterplot(data=flight_df, x='EV', y='AA')\nplt.show()\n\n\n\n\nMelalui scatter plot di atas, kita dapat semakin yakin bahwa kesimpulan yang kita ambil dengan melihat heatmap sebelumnya benar.\n\n\"\"\"\nTambahan scatter plot pada maskapai lain yang\nmemiliki korelasi tinggi\n\"\"\"\n\nsns.scatterplot(data=flight_df, x='EV', y='UA')\nplt.show()\n\n\n\n\n\n\"\"\"\nScatter plot pada maskapai yang memiliki\nkorelasi rendah (mendekati 0)\n\"\"\"\n\nsns.scatterplot(data=flight_df, x='UA', y='HA')\nplt.show()\n\n\n\n\nPada heatmap, terlihat bahwa maskapai UA dan HA memiliki korelasi yang rendah, yaitu 0.067. Sehingga, jika kita buat scatter plotnya, menghasilkan plot seperti di atas.\nUntuk memahami scatter plot lebih baik, kita akan menggunakan dataset lainnya, yaitu insurance.csv yang merupakan data berisi biaya asuransi (charges) beberapa orang.\n\ninsurance_df.head()\n\n\n\n\n\n  \n    \n      \n      age\n      sex\n      bmi\n      children\n      smoker\n      region\n      charges\n    \n  \n  \n    \n      0\n      19\n      female\n      27.900\n      0\n      yes\n      southwest\n      16884.92400\n    \n    \n      1\n      18\n      male\n      33.770\n      1\n      no\n      southeast\n      1725.55230\n    \n    \n      2\n      28\n      male\n      33.000\n      3\n      no\n      southeast\n      4449.46200\n    \n    \n      3\n      33\n      male\n      22.705\n      0\n      no\n      northwest\n      21984.47061\n    \n    \n      4\n      32\n      male\n      28.880\n      0\n      no\n      northwest\n      3866.85520\n    \n  \n\n\n\n\nMisal, kita ingin melihat keterkaitan indeks massa tubuh (bmi) seseorang dengan biaya asuransi (charges) orang tersebut. Sama seperti sebelumnya, kita dapat melakukannya seperti pada code di bawah.\n\n# Mengubah palette menjadi default\nsns.set_palette('tab10')\n# Membuat scatter plot antara fitur bmi dan charges\nsns.scatterplot(data=insurance_df, x='bmi', y='charges')\n\nplt.show()\n\n\n\n\nScatter plot di atas menunjukkan bahwa korelasi antara bmi dan charges adalah cenderung positif, tetapi tidak terlalu tinggi. Yang artinya, orang dengan BMI tinggi, cenderung akan membayar biaya asuransi lebih tinggi.\nAgar kita semakin yakin dengan kesimpulan tersebut, kita dapat menambahakn garis regresi pada scatter plot tersebut dengan menggunakan sns.regplot().\n\nsns.regplot(data=insurance_df, x='bmi', y='charges')\nplt.show()\n\n\n\n\nBerdasarkan scatter plot dan garis regresi dihasilkan, terlihat bahwa kesimpulan yang kita ambil benar. Agar semakin yakin lagi, kita juga dapat menghitung langsung korelasi Pearsonnya menggunakan cara sebelumnya, yaitu pandas .corr().\n\ninsurance_df[['bmi', 'charges']].corr()\n\n\n\n\n\n  \n    \n      \n      bmi\n      charges\n    \n  \n  \n    \n      bmi\n      1.000000\n      0.198341\n    \n    \n      charges\n      0.198341\n      1.000000\n    \n  \n\n\n\n\nDengan menggunakan seaborn, kita juga dapat memvisualisasikan scatter plot berdasarkan dengan pewarnaan yang berbeda berdasarkan fitur lainnya yang bertipe kategorik.\nMisal, kita ingin membuat scatter plot antara fitur bmi dan charges dengan pewarnaannya berdasarkan nilai dari fitur smoker, yaitu yes atau no. Kita dapat set parameter hue='smoker' pada sns.scatterplot() seperti pada code di bawah.\n\nsns.scatterplot(data=insurance_df, x='bmi', y='charges', hue='smoker')\nplt.show()\n\n\n\n\nSehingga dihasilkan pewarnaan yang berbeda untuk seseorang yang merupakan perokok (biru) dan yang tidak (orange). Berdasarkan scatter plot di atas, terlihat bahwa korelasi antara bmi dan charges untuk perokok cendering tinggi positif (semakin besar bmi, semakin besar juga charges). Sedangkan, untuk bukan perokok, korelasinya cenderung rendah (semakin besar bmi, tidak terlalu berpengaruh terhadap charges).\nSeperti cara sebelumnya, kita dapat menambahkan garis regresi. Namun, karena kita disini menggunakan hue, terdapat dua cara untuk menambahkan garis regresi, yaitu yang pertama adalah menggunakan sns.regplot() seperti di bawah ini.\n\nsns.regplot(data=insurance_df.query('smoker == \"yes\"'), x='bmi', y='charges') # axes 1\nsns.regplot(data=insurance_df.query('smoker == \"no\"'), x='bmi', y='charges') # axes 2\nplt.show()\n\n\n\n\nPerhatikan bahwa sns.regplot() dipanggil dua kali karena fungsi tersebut tidak memiliki parameter hue.\nUntuk mempermudah, kita dapat menggunakan cara kedua, yaitu menggunakan sns.lmplot(). Cara kerja sns.lmplot() yaitu menggabungkan dua (atau lebih) sns.regplot() dalam satu figur.\n\nsns.lmplot(data=insurance_df, x='bmi', y='charges', hue='smoker')\nplt.show()\n\n\n\n\n\n\n\nBox plot dan swarm plot biasa digunakan untuk melihat keterkaitan antara data kategorik dan data numerik. Swarm plot biasa disebut sebagai “categorical scatter plot”, karena plot yang dihasilkan mirip seperti scatter plot, tetapi untuk data kategorik.\nUntuk menggunakan box plot pada seaborn kita dapat menggunakan sns.boxplot().\nUntuk menggunakan swarm plot pada seaborn kita dapat menggunakan sns.swarmplot().\nMisal, kita ingin melihat keterkaitan antara fitur smoker dan charges menggunakan swarm plot. Maka, kita dapat menggunakan code seperti di bawah ini.\n\nplt.subplots(figsize=(10,6))\n\nsns.swarmplot(data=insurance_df, x='smoker', y='charges', size=3)\nplt.show()\n\n\n\n\nBerdasarkan swarm plot di atas, terlihat bahwa perokok cenderung memiliki biaya asuransi yang lebih tinggi dibandingkan yang bukan perokok. Selain itu, semakin lebar “swarm” pada suatu kategori berarti semakin banyak seseorang dengan nilai charges tersebut.\nApabila kita ingin menggunakan box plot, maka dapat digunakan code seperti di bawah ini.\n\nsns.boxplot(data=insurance_df, x='smoker', y='charges')\nplt.show()\n\n\n\n\nPada box plot, terdapat dua istilah yang umum digunakan, yaitu “box” dan “whiskers”. Pada box plot di atas, “box” merupakan persegi panjang berwarna biru dan orange. Garis di tengah box merupakan nilai mediannya, serta garis bawah dan garis atas box merupakan kuartil bawah (Q1) dan kuartil atas (Q3) secara berurutan. “Whiskers” adalah garis yang merupakan perpanjangan dari box. Ujung dari whiskers atas adalah Q3 + (1.5 x IQR) data, sedangkan ujung whiskers bawah adalah Q1 - (1.5 x IQR) data.\nTitik di luar box dan whiskers tersebut adalah titik yang biasa dijadikan sebagai outlier (penentuan outlier diserahkan ke diri masing-masing, apakah hanya dengan melihat box plot atau dengan menggunakan metode lain, tetapi untuk mempermudah dapat menggunakan box plot).\n\n\n\nSelain box plot dan swarm plot, kita juga dapat melihat persebaran data menggunakan histogram dan density plot. Histogram biasa digunakan untuk melihat persebaran data secara diskrit, sedangkan density plot untuk melihat persebaran data secara kontinu.\nUntuk membuat histogram pada seaborn, kita dapat menggunakan sns.histplot().\nUntuk membuat density plot pada seaborn, kita dapat menggunakan sns.kdeplot().\nMisal, kita ingin melihat persebaran dari fitur charges pada insurance_df. Maka dapat digunakan code seperti di bawah.\n\nplt.subplots(figsize=(12,6))\n\nsns.histplot(data=insurance_df, x='charges')\nplt.show()\n\n\n\n\nBerdasarkan histogram di atas, terlihat bahwa distribusi charges cenderung “skew” atau miring ke kanan. “Skewness” atau tingkat kecondongan merupakan aspek yang penting untuk diperhatikan ketika kita ingin membuat model Machine Learning.\nSeperti scatter plot, kita juga dapat menentukan pewarnaan histogram berdasarkan fitur lainnya dengan menggunakan parameter hue seperti di bawah ini/\n\nplt.subplots(figsize=(12,6))\nsns.histplot(data=insurance_df, x='charges', hue='smoker')\nplt.show()\n\n\n\n\nJika ingin membuat density plot dari fitur charges, kita dapat menggunakan kode seperti di bawah ini. Parameter shade berfungsi untuk memberikan warna di bawah kurva.\n\nplt.subplots(figsize=(12,6))\nsns.kdeplot(data=insurance_df, x='charges', shade=True)\nplt.show()\n\n\n\n\nsns.kdeplot() juga dapat menggunakan parameter hue.\n\nplt.subplots(figsize=(12,6))\nsns.kdeplot(data=insurance_df, x='charges',\n            hue='smoker', shade=True)\nplt.show()\n\n\n\n\nApabila kita ingin menggabungkan histogram dan density plot dalam satu figur, kita dapat menggunakan sns.histplot() dengan parameter kde=True.\n\nplt.subplots(figsize=(12,6))\nsns.histplot(data=insurance_df, x='charges', hue='smoker', kde=True)\nplt.show()\n\n\n\n\n\n\n\nPada seaborn, kita juga dapat membuat dua plot yang berbeda dari dua fitur dalam satu figur yang sama menggunakan sns.jointplot().\nJenis plot yang dihasilkan dapat diatur pada parameter kind. Pilihan jenis kind yang disediakan dapat dilihat pada: https://seaborn.pydata.org/generated/seaborn.jointplot.html\n\nsns.jointplot(data=insurance_df, x='charges', y='bmi', hue='smoker', kind=\"scatter\")\n\nplt.show()\n\n\n\n\n\nsns.jointplot(data=insurance_df, x='charges', y='bmi', hue='smoker', kind=\"hist\")\n\nplt.show()\n\n\n\n\n\nsns.jointplot(data=insurance_df, x='charges', y='bmi', hue='smoker', kind=\"kde\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nimage.png\n\n\nsource: https://www.kaggle.com/code/alexisbcook/choosing-plot-types-and-custom-styles"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sains-data-2023",
    "section": "",
    "text": "Timeline\n\npraktikum-1: 1 maret 2023, presensi: ristek.link/presensi-sains-data-01\npraktikum-2: 8 maret 2023, presensi: ristek.link/presensi-sains-data-02"
  }
]